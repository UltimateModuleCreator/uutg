<?php /** @var \Uutg\Generator $generator */ ?>
<?= $generator->getHeader();?>
<?= ($namespace = $generator->getNamespace()) ? 'namespace ' . $namespace . ';' : '' ?>


<?php $constructParams = $generator->getConstructParams();?>
<?php $mockables = $generator->getMockables();?>
<?php foreach ($generator->getUses() as $use) : ?>
<?= 'use ' . $use; ?>;
<?php endforeach;?>

class <?= $generator->getTestClassName();?> extends TestCase
{
<?php foreach ($mockables as $param) : ?>
    /**
     * @var <?= $generator->getClassName($param->getType()->getName()); ?> | MockObject
     */
    private $<?= $param->getName();?>;
<?php endforeach;?>
    /**
     * @var <?= $generator->getClassName()."\n";?>
     */
    private $<?= lcfirst($generator->getClassName())?>;

    /**
     * setup tests
     */
    protected function setUp(): void
    {
<?php foreach ($mockables as $param) : ?>
        $this-><?= $param->getName();?> = <?= $generator->getMock($param)?>

<?php endforeach;?>
        $this-><?= lcfirst($generator->getClassName())?> = new <?= $generator->getClassName();?>(
<?php foreach ($constructParams as $index => $param) : ?>
            <?= $generator->getConstructParamValue($param) . (($index != count($constructParams) - 1) ? ',' : '');?>

<?php endforeach;?>
        );
    }

<?php foreach ($generator->getTestableMethods() as $method) : ?>

    /**
     * @covers <?= $generator->getFullClassName();?>::<?= $method->getName();?>

<?php if (!$method->isStatic()) : ?>
     * @covers <?= $generator->getFullClassName();?>::__construct
<?php endif;?>
     */
    public function test<?= ucfirst($method->getName()) ?>()
    {

    }
<?php endforeach;?>
}
