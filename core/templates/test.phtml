<?php /** @var \Uutg\TestInstance $test */?>
<?php /** @var \Uutg\Utility $utility */?>
<?= $test->getHeader();?>
<?= ($namespace = $test->getNamespace()) ? 'namespace ' . $namespace . ';' : '';?>


<?php foreach ($test->getUses() as $use):  ?>
use <?= $use['class'] ?><?= ($use['level'] > 0) ? ' as ' . $use['alias'] : ''?>;
<?php endforeach;?>

class <?= $test->getClassName(); ?>Test extends TestCase
{
<?php foreach ($test->getMockables() as $param) : ?>
    /**
     * @var <?= $test->getClassAlias($param['class']); ?> | MockObject
     */
    private<?= $test->isStrongMode() ? ' ' . $test->getClassAlias($param['class']) : ''?> $<?= $param['name'];?>;
<?php endforeach;?>
<?php if ($test->hasNonStaticMethods()) :?>
    /**
     * @var <?= $test->getClassAlias($test->getClassName(true))."\n";?>
     */
    private<?= $test->isStrongMode() ? ' ' . $test->getClassAlias($test->getClassName(true)): ''?> $<?= $test->getTestInstanceVarName()?>;
<?php endif;?>

    /**
     * Setup tests
     */
    protected function setUp(): void
    {
<?php foreach ($test->getMockables() as $param) : ?>
        $this-><?= $param['name'];?> = $this->createMock(<?= $test->getClassAlias($param['class']) ?>::class);
<?php endforeach;?>
<?php if ($test->hasNonStaticMethods()) : ?>
<?php
    $prefix = '$this->' . $test->getTestInstanceVarName() . ' = new ' . $test->getClassAlias($test->getClassName(true)) . '(';
    $suffix = ');';
    $indent = 3 * 4;
    $stringParams = $utility->formatMethodParams(
        implode(
            ', ',
            array_map(
                function (array $param) {
                    return $param['mockable'] ? '$this->' . $param['name'] : $param['value'];
                },
                $test->getConstructorParams()
            )
        ),
        strlen($prefix),
        strlen($suffix),
        $indent
    );
?>
        <?= $prefix . $stringParams . $suffix?>
<?php endif;?>

    }
<?php foreach ($test->getMethods() as $method) : ?>

    /**
<?php foreach ($method['covers'] as $cover):  ?>
     * @covers \<?= $test->getClassName(true);?>::<?= $cover;?>

<?php endforeach;?>
     */
    public function test<?= ucfirst($method['name']) ?>()
    {
<?php
    $prefix = !$method['static']
        ? '$this->' . $test->getTestInstanceVarName() . '->' . $method['name'] . '('
        : $test->getClassAlias($test->getClassName(true)) . '::' . $method['name'] . '(';
    $suffix = ');';
    $indent = 4 * 3; //3 tabs in spaces
    $stringParams = $utility->formatMethodParams(
        implode(
        ', ',
            array_map(
                function (array $param) {
                    return $param['mockable'] ? '$this->' . $param['name'] : $param['value'];
                },
                $method['params']
            )
        ),
        strlen($prefix),
        strlen($suffix),
        $indent
    );
?>
        <?= $prefix . $stringParams . $suffix?>

    }
<?php endforeach;?>
}
